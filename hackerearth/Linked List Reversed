'''
https://www.hackerearth.com/practice/data-structures/linked-list/singly-linked-list/practice-problems/algorithm/reversed-linked-list-01b722df/


'''
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList():
    def __init__(self):
        self.head = None
        self.curr_node = None

    def push(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            self.curr_node = new_node
        else:
            self.curr_node.next = new_node
            self.curr_node = new_node
    
    def printList(self):
        tmp = self.head
        while tmp.next != None:
            print(tmp.data, end=' -> ')
            tmp = tmp.next
        print(tmp.data)

    def reverseLinkedList(self):
        prev = None
        curr = self.head
        while curr.next is not None:
            nxt = curr.next
            curr.next = prev
            prev = curr
            curr = nxt
        curr.next = prev
        self.head = curr
    
    def returnList(self):
        curr = self.head
        while curr.next != None:
            yield curr.data
            curr = curr.next
        yield curr.data
        



name = input()                  # Reading input from STDIN
arr = [int(i) for i in input().split(' ')]         # Writing output to STDOUT

out = []
linkedlist = LinkedList()
for j in range(len(arr)):
    i = arr[j]
    if i%2 == 0:
        linkedlist.push(i)
    
    if i %2 != 0 or j == len(arr)-1:
        if linkedlist.head != None:
            linkedlist.reverseLinkedList()
            out.extend([p for p in linkedlist.returnList()])
            linkedlist = LinkedList()
        if i %2 != 0:
            out.append(i)
print(' '.join(map(str, out)))
